// Generated by github.com/steida/coffee2closure 0.1.12
/**
  @fileoverview A point in geographical coordinates: latitude and longitude.
 */
goog.provide('globeGeometry.LatLng');
goog.require('globeGeometry.latLng.Parser');
goog.require('globeGeometry.math');
goog.require('goog.math');

/**
  @param {*} lat
  @param {*} lng
  @constructor
  @final
  @export
 */
globeGeometry.LatLng = function(lat, lng) {
  this.lat = goog.math.clamp(Number(lat), -90, 90);
  this.lng = goog.math.clamp(Number(lng), -180, 180);
}

/**
  @type {number}
  @private
 */
globeGeometry.LatLng.prototype.PRECISION = 9;

/**
  Factory for creating LatLng instances from various input data formats
  @param {string} input
  @return {globeGeometry.LatLng}
  @export
 */
globeGeometry.LatLng.createInstance = function(input) {
  var latLng, parser;
  parser = new globeGeometry.latLng.Parser();
  latLng = parser.parseDms(input);
  if (!goog.isArray(latLng)) {
    latLng = parser.parseDdm(input);
  }
  if (!goog.isArray(latLng)) {
    latLng = parser.parseDd(input);
  }
  if (!goog.isArray(latLng)) {
    throw Error('Invalid input');
  }
  return new globeGeometry.LatLng(latLng[0], latLng[1]);
};

/**
  @return {number}
  @export
 */
globeGeometry.LatLng.prototype.getLat = function() {
  return this.lat;
};

/**
  @return {number}
  @export
 */
globeGeometry.LatLng.prototype.getLng = function() {
  return this.lng;
};

/**
  @return {string}
  @export
 */
globeGeometry.LatLng.prototype.toString = function() {
  return '(' + this.lat + ', ' + this.lng + ')';
};

/**
  @param {number} precision
  @return {string}
  @export
 */
globeGeometry.LatLng.prototype.toUrlValue = function(precision) {
  var lat, lng;
  if (precision == null) {
    precision = 6;
  }
  lat = globeGeometry.math.round(this.getLat(), precision);
  lng = globeGeometry.math.round(this.getLng(), precision);
  return Number(lat) + ',' + Number(lng);
};

/**
  @param {string} separator
  @param {number} precision
  @return {string}
  @export
 */
globeGeometry.LatLng.prototype.toDd = function(separator, precision) {
  var lat, latLetter, lng, lngLetter;
  if (separator == null) {
    separator = ' ';
  }
  if (precision == null) {
    precision = 6;
  }
  lat = globeGeometry.math.toFixed(Math.abs(this.getLat()), precision);
  lng = globeGeometry.math.toFixed(Math.abs(this.getLng()), precision);
  latLetter = this.getLat() < 0 ? 'S' : 'N';
  lngLetter = this.getLng() < 0 ? 'E' : 'W';
  return lat + '°' + latLetter + separator + lng + '°' + lngLetter;
};

/**
  @param {string} separator
  @param {number} precision
  @return {string}
  @export
 */
globeGeometry.LatLng.prototype.toDdm = function(separator, precision) {
  var dLat, dLng, lat, latLetter, lng, lngLetter, mLat, mLng;
  if (separator == null) {
    separator = ' ';
  }
  if (precision == null) {
    precision = 3;
  }
  lat = Math.abs(this.getLat());
  lng = Math.abs(this.getLng());
  dLat = globeGeometry.math.toFixed(lat, 0);
  dLng = globeGeometry.math.toFixed(lng, 0);
  mLat = globeGeometry.math.round((lat - dLat) * 60, precision);
  mLng = globeGeometry.math.round((lng - dLng) * 60, precision);
  latLetter = this.getLat() < 0 ? 'S' : 'N';
  lngLetter = this.getLng() < 0 ? 'E' : 'W';
  return dLat + '°' + mLat + "'" + latLetter + separator + dLng + '°' + mLng + "'" + lngLetter;
};

/**
  @param {string} separator
  @param {number} precision
  @return {string}
  @export
 */
globeGeometry.LatLng.prototype.toDms = function(separator, precision) {
  var dLat, dLng, lat, latLetter, lng, lngLetter, mLat, mLng, sLat, sLng;
  if (separator == null) {
    separator = ' ';
  }
  if (precision == null) {
    precision = 1;
  }
  lat = Math.abs(this.getLat());
  lng = Math.abs(this.getLng());
  dLat = globeGeometry.math.toFixed(lat, 0);
  dLng = globeGeometry.math.toFixed(lng, 0);
  mLat = globeGeometry.math.toFixed((lat - dLat) * 60, 0);
  mLng = globeGeometry.math.toFixed((lng - dLng) * 60, 0);
  sLat = globeGeometry.math.round((lat - dLat - mLat / 60) * 3600, precision);
  sLng = globeGeometry.math.round((lng - dLng - mLng / 60) * 3600, precision);
  latLetter = this.getLat() < 0 ? 'S' : 'N';
  lngLetter = this.getLng() < 0 ? 'E' : 'W';
  return dLat + '°' + mLat + "'" + sLat + '"' + latLetter + separator + dLng + '°' + mLng + "'" + sLng + '"' + lngLetter;
};

/**
  @param {globeGeometry.LatLng=} other
  @return {boolean}
  @export
 */
globeGeometry.LatLng.prototype.equals = function(other) {
  if (!goog.isDefAndNotNull(other)) {
    return false;
  }
  return goog.math.nearlyEquals(this.getLat(), other.getLat()) && goog.math.nearlyEquals(this.getLng(), other.getLng());
};