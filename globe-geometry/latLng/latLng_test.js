// Generated by github.com/steida/coffee2closure 0.1.12
suite('globeGeometry.LatLng', function() {
  var LatLng;
  LatLng = globeGeometry.LatLng;
  suite('constructor', function() {
    test('should work with numeric string', function() {
      var latLng;
      latLng = new LatLng('42.3', '17.46897');
      assert.deepEqual(latLng.getLat(), 42.3);
      return assert.deepEqual(latLng.getLng(), 17.46897);
    });
    test('should work with non numeric string', function() {
      var latLng;
      latLng = new LatLng('xyz', '17.46897');
      assert.deepEqual(latLng.getLat(), NaN);
      return assert.deepEqual(latLng.getLng(), 17.46897);
    });
    return test('should limit input into range', function() {
      var latLng;
      latLng = new LatLng(300, 500);
      assert.deepEqual(latLng.getLat(), 90);
      assert.deepEqual(latLng.getLng(), 180);
      latLng = new LatLng(-300, -500);
      assert.deepEqual(latLng.getLat(), -90);
      return assert.deepEqual(latLng.getLng(), -180);
    });
  });
  suite('toString', function() {
    test('should work with floats', function() {
      return assert.equal(new LatLng(42.3, 17.46897).toString(), '(42.3, 17.46897)');
    });
    return test('should work with integers', function() {
      return assert.equal(new LatLng(42, -17).toString(), '(42, -17)');
    });
  });
  suite('toUrlValue', function() {
    test('should work with precision', function() {
      var latLng;
      latLng = new LatLng(1.123456789, -2.123456789);
      return assert.deepEqual(latLng.toUrlValue(2), '1.12,-2.12');
    });
    test('should work with default precision 6', function() {
      var latLng;
      latLng = new LatLng(1.123456789, -2.123456789);
      return assert.deepEqual(latLng.toUrlValue(), '1.123457,-2.123457');
    });
    return test('should not add trailing zeros', function() {
      var latLng;
      latLng = new LatLng(1.12, -2.12);
      assert.deepEqual(latLng.toUrlValue(10), '1.12,-2.12');
      latLng = new LatLng(10, -20);
      return assert.deepEqual(latLng.toUrlValue(10), '10,-20');
    });
  });
  suite('equals', function() {
    test('should work with non equal latLng', function() {
      var data, dataProvider, latLng, latLng2, _i, _len, _results;
      dataProvider = [[10, -20], [-20, 10], [1.123, -2]];
      latLng = new LatLng(1.123, -20);
      _results = [];
      for (_i = 0, _len = dataProvider.length; _i < _len; _i++) {
        data = dataProvider[_i];
        latLng2 = new LatLng(data[0], data[1]);
        _results.push(assert.isFalse(latLng.equals(latLng2), latLng2.toString()));
      }
      return _results;
    });
    test('should work with equal latLng', function() {
      var data, dataProvider, latLng, latLng2, _i, _len, _results;
      dataProvider = [[10, -20], [-20, 10], [1.123, -2]];
      _results = [];
      for (_i = 0, _len = dataProvider.length; _i < _len; _i++) {
        data = dataProvider[_i];
        latLng = new LatLng(data[0], data[1]);
        latLng2 = new LatLng(data[0], data[1]);
        _results.push(assert.isTrue(latLng.equals(latLng2), latLng2.toString()));
      }
      return _results;
    });
    return test('should work with decimal precision', function() {
      var data, dataProvider, latLng, latLng2, _i, _len, _results;
      dataProvider = [[10, 1.4, 10, 1.40000000000001], [10, 3.4, 10, 3.39999999999999]];
      _results = [];
      for (_i = 0, _len = dataProvider.length; _i < _len; _i++) {
        data = dataProvider[_i];
        latLng = new LatLng(data[0], data[1]);
        latLng2 = new LatLng(data[2], data[3]);
        _results.push(assert.isTrue(latLng.equals(latLng2), latLng.toString() + ' === ' + latLng2.toString()));
      }
      return _results;
    });
  });
  suite('createInstance', function() {
    test('should work with DMS input', function() {
      var latLng;
      latLng = LatLng.createInstance("49°12'32.3\" 16°35'53.9\"");
      assert.instanceOf(latLng, globeGeometry.LatLng);
      return assert.isTrue(latLng.equals(new LatLng(49.208972, 16.598306)));
    });
    test('should throw error on invalid input', function() {
      var shouldThrow;
      shouldThrow = function() {
        return LatLng.createInstance("xyz");
      };
      return assert["throw"](shouldThrow, Error, /Invalid input/);
    });
    test('should work with DDM input', function() {
      var latLng;
      latLng = LatLng.createInstance("32° 18.385',122° 36.875'");
      assert.instanceOf(latLng, globeGeometry.LatLng);
      return assert.isTrue(latLng.equals(new LatLng(32.306417, 122.614583)));
    });
    return test('should work with DD input', function() {
      var latLng;
      latLng = LatLng.createInstance("32.30642°N 122.61458°W");
      assert.instanceOf(latLng, globeGeometry.LatLng);
      return assert.isTrue(latLng.equals(new LatLng(32.306420, -122.614580)));
    });
  });
  suite('toDd', function() {
    test('should work', function() {
      var dd, latLng;
      latLng = new LatLng(32.30642, 122.61458);
      dd = latLng.toDd();
      return assert.equal(dd, "32.30642°N 122.61458°W");
    });
    test('should work with separator', function() {
      var dd, latLng;
      latLng = new LatLng(32.30642, 122.61458);
      dd = latLng.toDd(',');
      return assert.equal(dd, "32.30642°N,122.61458°W");
    });
    test('should work with precision', function() {
      var dd, latLng;
      latLng = new LatLng(32.30642, 122.61458);
      dd = latLng.toDd(' ', 3);
      return assert.equal(dd, "32.306°N 122.614°W");
    });
    return test('should work with negative numbers', function() {
      var dd, latLng;
      latLng = new LatLng(-32.30642, -122.61458);
      dd = latLng.toDd();
      return assert.equal(dd, "32.30642°S 122.61458°E");
    });
  });
  suite('toDdm', function() {
    return test('should work', function() {
      var ddm, latLng;
      latLng = new LatLng(32.306416, 122.614583);
      ddm = latLng.toDdm();
      return assert.equal(ddm, "32°18.385'N 122°36.875'W");
    });
  });
  return suite('toDms', function() {
    return test('should work', function() {
      var dms, latLng;
      latLng = new LatLng(49.208972, 16.598305);
      dms = latLng.toDms();
      return assert.equal(dms, "49°12'32.3\"N 16°35'53.9\"W");
    });
  });
});