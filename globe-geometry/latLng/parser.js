// Generated by github.com/steida/coffee2closure 0.1.12
/**
  @fileoverview Various input LatLng format parser
 */
goog.provide('globeGeometry.latLng.Parser');
goog.require('goog.array');
goog.require('globeGeometry.math');

/**
  @constructor
  @final
 */
globeGeometry.latLng.Parser = function() {}

/**
  @param {string} dmsPair
  @return {Array | null}
 */
globeGeometry.latLng.Parser.prototype.parseDms = function(dmsPair) {
  var lat, lng, parts;
  parts = this.getLatLngParts(dmsPair);
  if (parts.length !== 2) {
    return null;
  }
  lat = this.parseDmsPart(parts[0]);
  lng = this.parseDmsPart(parts[1]);
  if (!goog.isNumber(lat) || !goog.isNumber(lng)) {
    return null;
  }
  return [lat, lng];
};

/**
  @param {string} ddmPair
  @return {Array | null}
 */
globeGeometry.latLng.Parser.prototype.parseDdm = function(ddmPair) {
  var lat, lng, parts;
  parts = this.getLatLngParts(ddmPair);
  if (parts.length !== 2) {
    return null;
  }
  lat = this.parseDdmPart(parts[0]);
  lng = this.parseDdmPart(parts[1]);
  if (!goog.isNumber(lat) || !goog.isNumber(lng)) {
    return null;
  }
  return [lat, lng];
};

/**
  @param {string} ddPair
  @return {Array | null}
 */
globeGeometry.latLng.Parser.prototype.parseDd = function(ddPair) {
  var lat, lng, parts;
  parts = this.getLatLngParts(ddPair);
  if (parts.length !== 2) {
    return null;
  }
  lat = this.parseDdPart(parts[0]);
  lng = this.parseDdPart(parts[1]);
  if (!goog.isNumber(lat) || !goog.isNumber(lng)) {
    return null;
  }
  return [lat, lng];
};

/**
  @param {string} dmsPair
  @return {Array}
  @private
 */
globeGeometry.latLng.Parser.prototype.getLatLngParts = function(dmsPair) {
  var delimiter, delimiters, parts, _i, _len;
  delimiters = [', ', ','];
  for (_i = 0, _len = delimiters.length; _i < _len; _i++) {
    delimiter = delimiters[_i];
    parts = dmsPair.split(delimiter);
    if (parts.length === 2) {
      return parts;
    }
  }
  return this.getLatLngPartsSeparatedBySpace(dmsPair);
};

/**
  @param {string} dmsPair
  @return {Array}
  @private
 */
globeGeometry.latLng.Parser.prototype.getLatLngPartsSeparatedBySpace = function(dmsPair) {
  var lat, lng, parts;
  parts = dmsPair.split(' ');
  if (parts.length < 2) {
    return [];
  }
  if (parts.length % 2 === 1) {
    return [];
  }
  lat = goog.array.slice(parts, 0, parts.length / 2).join('');
  lng = goog.array.slice(parts, parts.length / 2).join('');
  return [lat, lng];
};

/**
  @param {string} dms
  @return {number | null}
  @private
 */
globeGeometry.latLng.Parser.prototype.parseDmsPart = function(dms) {
  var deg, nums;
  nums = this.getNumericParts(dms, 3);
  if (!goog.isArray(nums)) {
    return null;
  }
  deg = nums[0] + nums[1] / 60 + nums[2] / 3600;
  return globeGeometry.math.round(deg, 6);
};

/**
  @param {string} ddm
  @return {number | null}
  @private
 */
globeGeometry.latLng.Parser.prototype.parseDdmPart = function(ddm) {
  var deg, nums;
  nums = this.getNumericParts(ddm, 2);
  if (!goog.isArray(nums)) {
    return null;
  }
  deg = nums[0] + nums[1] / 60;
  return globeGeometry.math.round(deg, 6);
};

/**
  @param {string} dd
  @return {number | null}
  @private
 */
globeGeometry.latLng.Parser.prototype.parseDdPart = function(dd) {
  var nums;
  nums = this.getNumericParts(dd, 1);
  if (!goog.isArray(nums)) {
    return null;
  }
  return globeGeometry.math.round(nums[0], 6);
};

/**
  @param {string} str
  @param {number} count
  @return {Array | null}
  @private
 */
globeGeometry.latLng.Parser.prototype.getNumericParts = function(str, count) {
  var nums, sign;
  nums = str.split(/[^0-9.,]+/);
  if (goog.array.peek(nums) === '') {
    nums.pop();
  }
  if (nums.length !== count) {
    return null;
  }
  sign = 1;
  if (goog.string.caseInsensitiveContains(str, 'W') || goog.string.caseInsensitiveContains(str, 'S')) {
    sign = -1;
  }
  nums = goog.array.map(nums, function(num) {
    num = goog.string.toNumber(num);
    return num = num * sign;
  });
  return nums;
};