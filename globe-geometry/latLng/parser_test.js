// Generated by github.com/steida/coffee2closure 0.1.12
suite('globeGeometry.latLng.Parser', function() {
  var Parser;
  Parser = new globeGeometry.latLng.Parser();
  suite('parseDms', function() {
    test('should work with various input formats', function() {
      var input, inputs, latLng, _i, _len, _results;
      inputs = ["49°12'32.3\" 16°35'53.9\"", "49° 12' 32.3\" 16° 35' 53.9\"", "49°12'32.3\",16°35'53.9\"", "49° 12' 32.3\",16° 35' 53.9\"", "49°12'32.3\", 16°35'53.9\"", "49° 12' 32.3\", 16° 35' 53.9\""];
      _results = [];
      for (_i = 0, _len = inputs.length; _i < _len; _i++) {
        input = inputs[_i];
        latLng = Parser.parseDms(input);
        _results.push(assert.sameMembers(latLng, [49.208972, 16.598306], 'Failed to parse ' + input));
      }
      return _results;
    });
    return test('should work with inputs from all parts of globe', function() {
      var input, inputs, latLng, _i, _len, _results;
      inputs = [["51°28'11.8\"N 117°24'03.0\"W", [51.469944, -117.400833]], ["23°56'34.0\"S 68°54'28.6\"W", [-23.942778, -68.907944]], ["37°51'19.3\"S 145°01'46.3\"E", [-37.855361, 145.029528]]];
      _results = [];
      for (_i = 0, _len = inputs.length; _i < _len; _i++) {
        input = inputs[_i];
        latLng = Parser.parseDms(input[0]);
        _results.push(assert.sameMembers(latLng, input[1], 'Failed to parse ' + input[0]));
      }
      return _results;
    });
  });
  suite('parseDdm', function() {
    return test('should work with various input formats', function() {
      var input, inputs, latLng, _i, _len, _results;
      inputs = ["32° 18.385' 122° 36.875'", "32°18.385' 122°36.875'", "32° 18.385',122° 36.875'", "32°18.385',122°36.875'", "32° 18.385', 122° 36.875'", "32°18.385', 122°36.875'"];
      _results = [];
      for (_i = 0, _len = inputs.length; _i < _len; _i++) {
        input = inputs[_i];
        latLng = Parser.parseDdm(input);
        _results.push(assert.sameMembers(latLng, [32.306417, 122.614583], 'Failed to parse ' + input));
      }
      return _results;
    });
  });
  return suite('parseDd', function() {
    return test('should work with various input formats', function() {
      var input, inputs, latLng, _i, _len, _results;
      inputs = ["32.30642° N 122.61458° W", "32.30642° N, 122.61458° W", "32.30642°N 122.61458°W", "32.30642°N,122.61458°W"];
      _results = [];
      for (_i = 0, _len = inputs.length; _i < _len; _i++) {
        input = inputs[_i];
        latLng = Parser.parseDd(input);
        _results.push(assert.sameMembers(latLng, [32.30642, -122.61458], 'Failed to parse ' + input));
      }
      return _results;
    });
  });
});