// Generated by github.com/steida/coffee2closure 0.1.12
/**
  @fileoverview Arc of parallel circle
 */
goog.provide('globeGeometry.globe.ParallelArc');

/**
  @param {number} start
  @param {number} end
  @constructor
  @final
 */
globeGeometry.globe.ParallelArc = function(start, end) {
  this.start = start;
  this.end = end;
}

/**
  @return {number}
 */
globeGeometry.globe.ParallelArc.prototype.getStart = function() {
  return this.start;
};

/**
  @return {number}
 */
globeGeometry.globe.ParallelArc.prototype.getEnd = function() {
  return this.end;
};

/**
  @return {boolean}
 */
globeGeometry.globe.ParallelArc.prototype.crossesDateMeridian = function() {
  return this.start > this.end;
};

/**
  @return {boolean}
 */
globeGeometry.globe.ParallelArc.prototype.crossesZeroMeridian = function() {
  if (this.start < 0 && this.end > 0) {
    return true;
  }
  if (this.start > 0 && this.end > 0 && this.crossesDateMeridian()) {
    return true;
  }
  if (this.start < 0 && this.end < 0 && this.crossesDateMeridian()) {
    return true;
  }
  return false;
};

/**
  @param {number} lat
  @return {boolean}
 */
globeGeometry.globe.ParallelArc.prototype.contains = function(lat) {
  if (this.crossesDateMeridian()) {
    return lat >= this.start || lat <= this.end;
  } else {
    return lat >= this.start && lat <= this.end;
  }
};

/**
  Extend the arc to minimize the length
  @param {number} lat
  @return {globeGeometry.globe.ParallelArc}
 */
globeGeometry.globe.ParallelArc.prototype.extend = function(lat) {
  var end, start, testEnd, testStart;
  if (this.contains(lat)) {
    start = this.start;
    end = this.end;
  } else {
    testStart = new globeGeometry.globe.ParallelArc(lat, this.end);
    testEnd = new globeGeometry.globe.ParallelArc(this.start, lat);
    if (testStart.getLength() >= testEnd.getLength()) {
      start = this.start;
      end = lat;
    } else {
      start = lat;
      end = this.end;
    }
  }
  return new globeGeometry.globe.ParallelArc(start, end);
};

/**
  @return {number}
 */
globeGeometry.globe.ParallelArc.prototype.getCenter = function() {
  var center;
  if (this.crossesDateMeridian()) {
    center = (this.start + this.end) / 2;
    if (center <= 0) {
      return center + 180;
    }
    return center - 180;
  } else {
    return (this.start + this.end) / 2;
  }
};

/**
  @param {globeGeometry.globe.ParallelArc} other
  @return {boolean}
 */
globeGeometry.globe.ParallelArc.prototype.intersects = function(other) {
  return this.contains(other.getStart()) || this.contains(other.getEnd()) || other.contains(this.getStart()) || other.contains(this.getEnd());
};

/**
  @return {boolean}
 */
globeGeometry.globe.ParallelArc.prototype.isEmpty = function() {
  return false;
};

/**
  @return {number}
 */
globeGeometry.globe.ParallelArc.prototype.getLength = function() {
  if (this.crossesDateMeridian()) {
    return 360 - this.start + this.end;
  } else {
    return this.end - this.start;
  }
};