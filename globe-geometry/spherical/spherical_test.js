// Generated by github.com/steida/coffee2closure 0.1.12
goog.require('globeGeometry.LatLng');
suite('globeGeometry.spherical', function() {
  var LatLng, Spherical;
  Spherical = globeGeometry.spherical;
  LatLng = globeGeometry.LatLng;
  suite('computeDistanceBetween', function() {
    return test('should work for Brno and NYC', function() {
      var brno, distance, nyc;
      brno = new LatLng('49.2020701', '16.5779606');
      nyc = new LatLng('40.7056308', '-73.9780035');
      distance = Spherical.computeDistanceBetween(brno, nyc);
      return assert.equal(Math.round(distance), 6760615);
    });
  });
  suite('computeHeading', function() {
    return test('should work for Brno and Barcelona', function() {
      var angle, barcelona, brno;
      brno = new LatLng('49.2020701', '16.5779606');
      barcelona = new LatLng('41.39479', '2.1487679');
      angle = Spherical.computeHeading(brno, barcelona);
      return assert.equal(Math.round(angle), -122);
    });
  });
  suite('computeLength', function() {
    return test('should work for circle', function() {
      var barcelona, barcelonaNyc, brno, brnoBarcelona, length, nyc, nycBrno, path, testLength;
      brno = new LatLng('49.2020701', '16.5779606');
      barcelona = new LatLng('41.39479', '2.1487679');
      nyc = new LatLng('40.7056308', '-73.9780035');
      brnoBarcelona = Spherical.computeDistanceBetween(brno, barcelona);
      barcelonaNyc = Spherical.computeDistanceBetween(barcelona, nyc);
      nycBrno = Spherical.computeDistanceBetween(nyc, brno);
      path = [brno, barcelona, nyc, brno];
      testLength = brnoBarcelona + barcelonaNyc + nycBrno;
      length = Spherical.computeLength(path);
      return assert.equal(Math.round(length), Math.round(testLength));
    });
  });
  return suite('computeOffset', function() {
    test('should work', function() {
      var brno, distance, heading, offset, shouldBe;
      brno = new LatLng('49.2020701', '16.5779606');
      distance = 12345;
      heading = 225;
      shouldBe = new LatLng(49.123592015556916, 16.45813708831463);
      offset = Spherical.computeOffset(brno, distance, heading);
      return assert.isTrue(offset.equals(shouldBe));
    });
    return test('should work with computeHeading and computeDistanceBetween', function() {
      var barcelona, brno, distance, heading;
      brno = new LatLng(49.2020701, 16.5779606);
      barcelona = new LatLng(41.39479, 2.1487679);
      distance = Spherical.computeDistanceBetween(brno, barcelona);
      heading = Spherical.computeHeading(brno, barcelona);
      return assert.isTrue(barcelona.equals(Spherical.computeOffset(brno, distance, heading)));
    });
  });
});